<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.Text" xml:space="preserve">
    <value>Opções da tabela dinâmica</value>
  </data>
  <data name="btnCancel.AccessibleName" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="btnOk.AccessibleName" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="btnOk.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="chkAutofitColumnWidths.Properties.AccessibleName" xml:space="preserve">
    <value>Larguras de coluna ajustar automaticamente na atualização</value>
  </data>
  <data name="chkAutofitColumnWidths.Properties.Caption" xml:space="preserve">
    <value>&amp; AutoAjuste larguras de coluna ao atualizar</value>
  </data>
  <data name="chkDisplayFieldAndFilter.Properties.AccessibleName" xml:space="preserve">
    <value>Legendas de campo de visualização e filtro soltar for</value>
  </data>
  <data name="chkDisplayFieldAndFilter.Properties.Caption" xml:space="preserve">
    <value>&amp; as legendas de campo de exibição e filtro soltar for</value>
  </data>
  <data name="chkDisplayItemLabels.Properties.AccessibleName" xml:space="preserve">
    <value>Centro e mesclar células com rótulos</value>
  </data>
  <data name="chkDisplayItemLabels.Properties.Caption" xml:space="preserve">
    <value>Exibir rótulos de item quando não há &amp; campos estão na área de valores</value>
  </data>
  <data name="chkEmptyCellsShow.Properties.AccessibleName" xml:space="preserve">
    <value>Para células vazias, mostrar</value>
  </data>
  <data name="chkEmptyCellsShow.Properties.Caption" xml:space="preserve">
    <value>Para esvaziar as células &amp; Mostrar:</value>
  </data>
  <data name="chkEnableCellEditing.Properties.AccessibleName" xml:space="preserve">
    <value>Ativar a célula edição na área de valores</value>
  </data>
  <data name="chkEnableCellEditing.Properties.Caption" xml:space="preserve">
    <value>&amp; permitir-célula edição na área de valores</value>
  </data>
  <data name="chkEnableShowDetails.Properties.AccessibleName" xml:space="preserve">
    <value>Ativar mostrar detalhes</value>
  </data>
  <data name="chkEnableShowDetails.Properties.Caption" xml:space="preserve">
    <value>&amp; Ativar mostrar detalhes</value>
  </data>
  <data name="chkErrorValuesShow.Properties.AccessibleName" xml:space="preserve">
    <value>Para o valor de erro mostrar</value>
  </data>
  <data name="chkErrorValuesShow.Properties.Caption" xml:space="preserve">
    <value>Para &amp; Mostrar valores de erro:</value>
  </data>
  <data name="chkGrandTotalsColumns.Properties.AccessibleName" xml:space="preserve">
    <value>Mostrar totais gerais para colunas</value>
  </data>
  <data name="chkGrandTotalsColumns.Properties.Caption" xml:space="preserve">
    <value>Mostrar &amp; totais gerais para colunas</value>
  </data>
  <data name="chkGrandTotalsRows.Properties.AccessibleName" xml:space="preserve">
    <value>Mostrar totais gerais para linhas</value>
  </data>
  <data name="chkGrandTotalsRows.Properties.Caption" xml:space="preserve">
    <value>&amp; mostrar totais gerais para linhas</value>
  </data>
  <data name="chkMergeAndCenterCells.Properties.AccessibleName" xml:space="preserve">
    <value>Centro e mesclar células com rótulos</value>
  </data>
  <data name="chkMergeAndCenterCells.Properties.Caption" xml:space="preserve">
    <value>&amp; centro e mesclar células com rótulos</value>
  </data>
  <data name="chkMultipleFiltersField.Properties.AccessibleName" xml:space="preserve">
    <value>Permitir vários filtros por campo</value>
  </data>
  <data name="chkMultipleFiltersField.Properties.Caption" xml:space="preserve">
    <value>&amp; permitir vários filtros por campo</value>
  </data>
  <data name="chkPreserveCellFormatting.Properties.AccessibleName" xml:space="preserve">
    <value>Preservar formatação de célula na atualização</value>
  </data>
  <data name="chkPreserveCellFormatting.Properties.Caption" xml:space="preserve">
    <value>&amp; preservar formatação de célula na atualização</value>
  </data>
  <data name="chkPrintExpandColapseButtons.Properties.AccessibleName" xml:space="preserve">
    <value>Botões de expandir/recolher impressão quando exibidos na tabela dinâmica</value>
  </data>
  <data name="chkPrintExpandColapseButtons.Properties.Caption" xml:space="preserve">
    <value>&amp; impressão expandir/fechar botões quando exibidos na tabela dinâmica</value>
  </data>
  <data name="chkRepeatRowLabels.Properties.AccessibleName" xml:space="preserve">
    <value>Repetir rótulos de linha em cada página impressa</value>
  </data>
  <data name="chkRepeatRowLabels.Properties.Caption" xml:space="preserve">
    <value>&amp; repetir rótulos de linha em cada página impressa</value>
  </data>
  <data name="chkRerfeshData.Properties.AccessibleName" xml:space="preserve">
    <value>Atualizar dados ao abrir o arquivo.</value>
  </data>
  <data name="chkRerfeshData.Properties.Caption" xml:space="preserve">
    <value>&amp; atualizar dados ao abrir o arquivo.</value>
  </data>
  <data name="chkSaveSourceDataWithFile.Properties.AccessibleName" xml:space="preserve">
    <value>Salvar dados de origem com arquivo</value>
  </data>
  <data name="chkSaveSourceDataWithFile.Properties.Caption" xml:space="preserve">
    <value>&amp; salvar a fonte de dados com arquivo</value>
  </data>
  <data name="chkSetPrintTitles.Properties.AccessibleName" xml:space="preserve">
    <value>Definir títulos de impressão</value>
  </data>
  <data name="chkSetPrintTitles.Properties.Caption" xml:space="preserve">
    <value>&amp; definir títulos de impressão</value>
  </data>
  <data name="chkShowContextualTooltips.Properties.AccessibleName" xml:space="preserve">
    <value>Mostrar dicas de ferramentas contextuais</value>
  </data>
  <data name="chkShowContextualTooltips.Properties.Caption" xml:space="preserve">
    <value>Mostrar &amp; tooltips contextuais</value>
  </data>
  <data name="chkShowExpandCollapseButtons.Properties.AccessibleName" xml:space="preserve">
    <value>Mostrar botões de expandir/recolher</value>
  </data>
  <data name="chkShowExpandCollapseButtons.Properties.Caption" xml:space="preserve">
    <value>&amp; Mostrar botões de expandir/recolher</value>
  </data>
  <data name="chkShowItemsWithNoDataOnColumns.Properties.AccessibleName" xml:space="preserve">
    <value>Mostrar itens sem dados em colunas</value>
  </data>
  <data name="chkShowItemsWithNoDataOnColumns.Properties.Caption" xml:space="preserve">
    <value>Mostrar &amp; itens sem dados em colunas</value>
  </data>
  <data name="chkShowItemsWithNoDataOnRows.Properties.AccessibleName" xml:space="preserve">
    <value>Mostrar itens sem dados em linhas</value>
  </data>
  <data name="chkShowItemsWithNoDataOnRows.Properties.Caption" xml:space="preserve">
    <value>Mostrar &amp; ems sem dados em linhas</value>
  </data>
  <data name="chkShowPropertiesInTooltips.Properties.AccessibleName" xml:space="preserve">
    <value>Mostrar propriedades nas dicas de ferramentas</value>
  </data>
  <data name="chkShowPropertiesInTooltips.Properties.Caption" xml:space="preserve">
    <value>Mostrar propriedades no &amp; Dicas de ferramentas</value>
  </data>
  <data name="chkShowTheValuesRow.Properties.AccessibleName" xml:space="preserve">
    <value>Mostrar a linha de valores</value>
  </data>
  <data name="chkShowTheValuesRow.Properties.Caption" xml:space="preserve">
    <value>Mostrar o &amp; linha de valores</value>
  </data>
  <data name="chkSubtotalFilteredItems.Properties.AccessibleName" xml:space="preserve">
    <value>Itens de página filtrada subtotal</value>
  </data>
  <data name="chkSubtotalFilteredItems.Properties.Caption" xml:space="preserve">
    <value>Subtotal &amp; itens de página filtrada</value>
  </data>
  <data name="chkUseCustomLists.Properties.AccessibleName" xml:space="preserve">
    <value>Uso ao classificar listas personalizadas</value>
  </data>
  <data name="chkUseCustomLists.Properties.Caption" xml:space="preserve">
    <value>Use Custom &amp; listas ao classificar</value>
  </data>
  <data name="edtDecsription.Properties.AccessibleName" xml:space="preserve">
    <value>Descrição</value>
  </data>
  <data name="edtEmptyCellsShow.Properties.AccessibleName" xml:space="preserve">
    <value>Para células vazias, mostrar</value>
  </data>
  <data name="edtErrorValuesShow.Properties.AccessibleName" xml:space="preserve">
    <value>Para o valor de erro mostrar</value>
  </data>
  <data name="edtFieldsReportFilterArea.Properties.AccessibleName" xml:space="preserve">
    <value>Campos de exibição na área de filtro de relatório</value>
  </data>
  <data name="edtIndentRowLabels.Properties.AccessibleName" xml:space="preserve">
    <value>Quando em rótulos de linha de travessão de forma compacta</value>
  </data>
  <data name="edtNumberOfItems.Properties.AccessibleName" xml:space="preserve">
    <value>Número de itens para reter por campo</value>
  </data>
  <data name="edtPivotTableName.Properties.AccessibleName" xml:space="preserve">
    <value>Nome de tabela dinâmica</value>
  </data>
  <data name="edtReportFilterFields.Properties.AccessibleName" xml:space="preserve">
    <value>Campos de filtro de relatório</value>
  </data>
  <data name="edtTitle.Properties.AccessibleName" xml:space="preserve">
    <value>Título</value>
  </data>
  <data name="layoutControl1.Text" xml:space="preserve">
    <value>layoutControl1</value>
  </data>
  <data name="layoutControlGroup1.Text" xml:space="preserve">
    <value>Layout &amp; &amp; formato</value>
  </data>
  <data name="layoutControlGroup3.Text" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="layoutControlGroup4.Text" xml:space="preserve">
    <value>Impressão</value>
  </data>
  <data name="layoutControlGroup5.Text" xml:space="preserve">
    <value>Dados</value>
  </data>
  <data name="layoutControlGroup6.Text" xml:space="preserve">
    <value>Texto alt</value>
  </data>
  <data name="lblAltText.AccessibleName" xml:space="preserve">
    <value>Títulos e descrições fornecem representações alternativas, baseado em texto da</value>
  </data>
  <data name="lblAltText.Text" xml:space="preserve">
    <value>Títulos e descrições fornecem representações alternativas, baseado em texto da
informações contidas em tabelas. Esta informação é útil para pessoas com visão
ou deficiências cognitivas que não podem ser capazes de ver ou entender a tabela. A
título possa ser lido para uma pessoa com deficiência e é usado para determinar se
Eles desejam ouvir a descrição do conteúdo.</value>
  </data>
  <data name="lblCharacters.AccessibleName" xml:space="preserve">
    <value>Personagens</value>
  </data>
  <data name="lblCharacters.Text" xml:space="preserve">
    <value>caractere (s)</value>
  </data>
  <data name="lblColumn.AccessibleName" xml:space="preserve">
    <value>Coluna</value>
  </data>
  <data name="lblColumn.Text" xml:space="preserve">
    <value>coluna:</value>
  </data>
  <data name="lblDescription.AccessibleName" xml:space="preserve">
    <value>Descrição</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>&amp; descrição</value>
  </data>
  <data name="lblDisplay.AccessibleName" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="lblDisplay.Text" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="lblFieldList.AccessibleName" xml:space="preserve">
    <value>Lista de campos</value>
  </data>
  <data name="lblFieldList.Text" xml:space="preserve">
    <value>Lista de campos</value>
  </data>
  <data name="lblFieldsReportFilterArea.AccessibleName" xml:space="preserve">
    <value>Campos de exibição na área de filtro de relatório</value>
  </data>
  <data name="lblFieldsReportFilterArea.Text" xml:space="preserve">
    <value>&amp; exibir campos na área de filtro do relatório:</value>
  </data>
  <data name="lblFilters.AccessibleName" xml:space="preserve">
    <value>Filtros</value>
  </data>
  <data name="lblFilters.Text" xml:space="preserve">
    <value>Filtros</value>
  </data>
  <data name="lblFormat.AccessibleName" xml:space="preserve">
    <value>Formato</value>
  </data>
  <data name="lblFormat.Text" xml:space="preserve">
    <value>Formato</value>
  </data>
  <data name="lblGrandTotals.AccessibleName" xml:space="preserve">
    <value>Totais gerais</value>
  </data>
  <data name="lblGrandTotals.Text" xml:space="preserve">
    <value>Totais gerais</value>
  </data>
  <data name="lblIndentRowLabels.AccessibleName" xml:space="preserve">
    <value>Quando em rótulos de linha de travessão de forma compacta</value>
  </data>
  <data name="lblIndentRowLabels.Text" xml:space="preserve">
    <value>Quando em &amp; travessão de forma compacta rótulos da linha:</value>
  </data>
  <data name="lblLayout.AccessibleName" xml:space="preserve">
    <value>Layout</value>
  </data>
  <data name="lblLayout.Text" xml:space="preserve">
    <value>Layout</value>
  </data>
  <data name="lblNumberOfItems.AccessibleName" xml:space="preserve">
    <value>Número de itens para reter por campo</value>
  </data>
  <data name="lblNumberOfItems.Text" xml:space="preserve">
    <value>&amp; número de itens para reter por campo:</value>
  </data>
  <data name="lblPivotTableData.AccessibleName" xml:space="preserve">
    <value>Dados de tabela dinâmica</value>
  </data>
  <data name="lblPivotTableData.Text" xml:space="preserve">
    <value>Dados de tabela dinâmica</value>
  </data>
  <data name="lblPivotTableName.AccessibleName" xml:space="preserve">
    <value>Nome de tabela dinâmica</value>
  </data>
  <data name="lblPivotTableName.Text" xml:space="preserve">
    <value>Dinâmica &amp; nome:</value>
  </data>
  <data name="lblPrint.AccessibleName" xml:space="preserve">
    <value>Print</value>
  </data>
  <data name="lblPrint.Text" xml:space="preserve">
    <value>Print</value>
  </data>
  <data name="lblReportFilterFields.AccessibleName" xml:space="preserve">
    <value>Campos de filtro de relatório por</value>
  </data>
  <data name="lblReportFilterFields.Text" xml:space="preserve">
    <value>Filtro de relatório &amp; campos por</value>
  </data>
  <data name="lblRetainItemsDeletedFromTheDataSource.AccessibleName" xml:space="preserve">
    <value>Reter itens excluídos da fonte de dados</value>
  </data>
  <data name="lblRetainItemsDeletedFromTheDataSource.Text" xml:space="preserve">
    <value>Reter itens excluídos da fonte de dados</value>
  </data>
  <data name="lblRow.AccessibleName" xml:space="preserve">
    <value>Linha</value>
  </data>
  <data name="lblRow.Text" xml:space="preserve">
    <value>row:</value>
  </data>
  <data name="lblSorting.AccessibleName" xml:space="preserve">
    <value>Classificação</value>
  </data>
  <data name="lblSorting.Text" xml:space="preserve">
    <value>Classificação</value>
  </data>
  <data name="lblTitle.AccessibleName" xml:space="preserve">
    <value>Título</value>
  </data>
  <data name="lblTitle.Text" xml:space="preserve">
    <value>&amp; título</value>
  </data>
  <data name="lblWhatIfAnalysis.AccessibleName" xml:space="preserve">
    <value>Análise What-If</value>
  </data>
  <data name="lblWhatIfAnalysis.Text" xml:space="preserve">
    <value>Análise What-If</value>
  </data>
  <data name="rgrpSort.Properties.AccessibleName" xml:space="preserve">
    <value>Tipo</value>
  </data>
  <data name="rgrpSort.Properties.Items1" xml:space="preserve">
    <value>Tipo &amp; da a Z</value>
  </data>
  <data name="rgrpSort.Properties.Items3" xml:space="preserve">
    <value>Tipo em orde de fonte de dados &amp; r</value>
  </data>
</root>